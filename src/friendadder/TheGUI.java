/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package friendadder;

import java.awt.Container;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showInputDialog;
import javax.swing.event.MenuKeyEvent;

/**
 *
 * @author Sam
 */
public class TheGUI extends javax.swing.JFrame {
    private Friend selectedFriend;
    private File fileSelected;
    /**
     * Creates new form TheGUI
     * This is an informational program that is designed to keep track of friends and their interests.
     * Meant to make life easier when meeting lots of new people.
     */
    public TheGUI() {
        initComponents();
        this.setTitle("FriendshipAdder");
        this.selectedFriend=null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        friendInfo1 = new friendadder.FriendInfo();
        menu = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        newFriend = new javax.swing.JMenuItem();
        viewFriend = new javax.swing.JMenuItem();
        removeFriend = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        save = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exit = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        about = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        friendInfo1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                friendInfo1MousePressed(evt);
            }
        });

        file.setText("File");
        file.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                fileMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });

        newFriend.setText("New");
        newFriend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                newFriendMousePressed(evt);
            }
        });
        newFriend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFriendActionPerformed(evt);
            }
        });
        file.add(newFriend);

        viewFriend.setText("View");
        viewFriend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                viewFriendMousePressed(evt);
            }
        });
        file.add(viewFriend);

        removeFriend.setText("Remove");
        removeFriend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                removeFriendMousePressed(evt);
            }
        });
        file.add(removeFriend);
        file.add(jSeparator2);

        save.setText("Save");
        save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                saveMousePressed(evt);
            }
        });
        file.add(save);
        file.add(jSeparator1);

        exit.setText("Exit");
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exitMousePressed(evt);
            }
        });
        file.add(exit);

        menu.add(file);

        jMenu1.setText("Settings");

        jMenuItem1.setText("Uninstall");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem1MousePressed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        menu.add(jMenu1);

        help.setText("Help");

        about.setText("About");
        about.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                aboutMousePressed(evt);
            }
        });
        help.add(about);

        menu.add(help);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(friendInfo1, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(friendInfo1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newFriendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFriendActionPerformed
        //Unused
    }//GEN-LAST:event_newFriendActionPerformed

    private void fileMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_fileMenuKeyPressed
        //Unused
    }//GEN-LAST:event_fileMenuKeyPressed

    private void exitMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMousePressed
        System.exit(0);
    }//GEN-LAST:event_exitMousePressed

    private void newFriendMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newFriendMousePressed
        //Creates new friend
        String name=showInputDialog("Enter Name");
        if(name!=null){
            System.out.println(name);
            String path=FirstTimeSetup.getFriendsPath();
            File newFriend=new File(path+name+".txt");
            try {
                FileWriter writer=new FileWriter(newFriend);
                writer.write(name);
                writer.write(System.getProperty("line.separator"));
                for(int q=1; q<2; q++){
                    writer.write("Add Info Here");
                    writer.write(System.getProperty("line.separator"));
                }
                for(int q=2; q<6; q++){
                    writer.write("0");
                    writer.write(System.getProperty("line.separator"));
                }
                for(int q=6; q<12; q++){
                    writer.write("Add Info Here");
                    writer.write(System.getProperty("line.separator"));
                }
                for(int q=12; q<14; q++){
                    writer.write("false");
                    writer.write(System.getProperty("line.separator"));
                }
                for(int q=14; q<32; q++){
                    writer.write("Add Info Here");
                    writer.write(System.getProperty("line.separator"));     
                }
                writer.write(FirstTimeSetup.getPicturesPath()+"blank.png");
                writer.close();
                System.out.println(newFriend.getName());
                    this.setFileSelected(newFriend);
                    this.processFile(newFriend);
            } catch (IOException ex) {
                Logger.getLogger(TheGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_newFriendMousePressed

    private void viewFriendMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewFriendMousePressed
        //Brings up Selector
        Selector s=new Selector(this);
        Dimension size=Toolkit.getDefaultToolkit().getScreenSize();
        s.setLocation((int)(size.getWidth()/2)-s.getWidth()/2, (int)(size.getHeight()/2)-s.getHeight()/2);
        s.setVisible(true);
    }//GEN-LAST:event_viewFriendMousePressed

    private void removeFriendMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeFriendMousePressed
        //Brings up Deleter
        Deleter d=new Deleter();
        Dimension size=Toolkit.getDefaultToolkit().getScreenSize();
        d.setLocation((int)(size.getWidth()/2-d.getWidth()/2), (int)(size.getHeight()/2-d.getHeight()/2));
        d.setVisible(true);
    }//GEN-LAST:event_removeFriendMousePressed

    private void saveMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMousePressed
        //Saves friend information to file
        String path=FirstTimeSetup.getFriendsPath();
        String fName=this.selectedFriend.getName();
        File oldFile=new File(path+fName+".txt");
        oldFile.delete();
        try {
            friendInfo1.editFriend(this.selectedFriend);
        } catch (IOException ex) {
            Logger.getLogger(TheGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        File newFile=new File(path+fName+".txt");
        try {
            try (FileWriter writer = new FileWriter(newFile)) {
                writer.write(selectedFriend.getName());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getGender());
                writer.write(System.getProperty("line.separator"));
                writer.write(String.valueOf(selectedFriend.getAge()));
                writer.write(System.getProperty("line.separator"));
                writer.write(String.valueOf(selectedFriend.getBirthDay()));
                writer.write(System.getProperty("line.separator"));
                writer.write(String.valueOf(selectedFriend.getBirthMonth()));
                writer.write(System.getProperty("line.separator"));
                writer.write(String.valueOf(selectedFriend.getBirthYear()));
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getConnection());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getRelationshipStatus());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getGetAlong());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getHairLength());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getHairColor());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getEyeColor());
                writer.write(System.getProperty("line.separator"));
                writer.write(String.valueOf(selectedFriend.getWearsGlasses()));
                writer.write(System.getProperty("line.separator"));
                writer.write(String.valueOf(selectedFriend.getWearsEarrings()));
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getDressUpStyle());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getShoeType());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getHeight());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getSkinTone());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavMusic());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavRestaurants());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavVideoGames());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavNonVideoGames());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavMovies());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavShows());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavBooks());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavHobbies());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavSports());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavPeople());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavFoods());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavClothesBrand());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavAnimals());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getFavTraditions());
                writer.write(System.getProperty("line.separator"));
                writer.write(selectedFriend.getPicture());
                System.out.println("Changes Saved");
                writer.flush();
                writer.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(TheGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveMousePressed

    private void aboutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutMousePressed
        JOptionPane.showMessageDialog(new JFrame(), "FriendshipAdder by Samuel S.\nKeep track of your friends and their interests");
    }//GEN-LAST:event_aboutMousePressed

    private void jMenuItem1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MousePressed
        //(Work in progress: meant to uninstall FriendshipAdder directory)
        String path=FirstTimeSetup.getProgramPath();
        File f=new File(path);
        f.deleteOnExit();
        this.dispose();
    }//GEN-LAST:event_jMenuItem1MousePressed

    private void friendInfo1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_friendInfo1MousePressed
        //unused
    }//GEN-LAST:event_friendInfo1MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TheGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TheGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TheGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TheGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TheGUI gui=new TheGUI();
                gui.setTitle("FriendshipAdder");
                gui.setVisible(true);
            }
        });
    }
    
    //gets selected file
    public File getFileSelected(){
        return this.fileSelected;
    }
    
    //sets selected file
    public  void setFileSelected(File newFile) throws FileNotFoundException, IOException{
        this.fileSelected=newFile;
        System.out.println(this.fileSelected.getName());
        this.processFile(newFile);
    }
    
    //gets selected friend
    public Friend getFriendSelected(){
        return this.selectedFriend;
    }
    
    //sets selected friend
    public void setFriendSelected(Friend newFriend){
        this.selectedFriend=newFriend;
    }
    
    //loads data from file
    public void processFile(File f) throws FileNotFoundException, IOException{
        Scanner reader=new Scanner(f);
        String[] data=new String[33];
        for(int q=0; q<33; q++){
            data[q]=reader.nextLine();
        }
        Friend d=new Friend(data[0]);
        this.setFriendSelected(d);
        d.setName(data[0]);
        d.setGender(data[1]);
        d.setAge(Integer.parseInt(data[2]));
        d.setBirthDay(Integer.parseInt(data[3]));
        d.setBirthMonth(Integer.parseInt(data[4]));
        d.setBirthYear(Integer.parseInt(data[5]));
        d.setConnection(data[6]);
        d.setRelationshipStatus(data[7]);
        d.setGetAlong(data[8]);
        d.setHairLength(data[9]);
        d.setHairColor(data[10]);
        d.setEyeColor(data[11]);
        d.setWearsGlasses(Boolean.parseBoolean(data[12]));
        d.setWearsEarrings(Boolean.parseBoolean(data[13]));
        d.setDressUpStyle(data[14]);
        d.setShoeType(data[15]);
        d.setHeight(data[16]);
        d.setSkinTone(data[17]);
        d.setFavMusic(data[18]);
        d.setFavRestaurants(data[19]);
        d.setFavVideoGames(data[20]);
        d.setFavNonVideoGames(data[21]);
        d.setFavMovies(data[22]);
        d.setFavShows(data[23]);
        d.setFavBooks(data[24]);
        d.setFavHobbies(data[25]);
        d.setFavSports(data[26]);
        d.setFavPeople(data[27]);
        d.setFavFoods(data[28]);
        d.setFavClothesBrand(data[29]);
        d.setFavAnimals(data[30]);
        d.setFavTraditions(data[31]);
        d.setPicture(data[32]);
        friendInfo1.processFriend(d);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu file;
    private friendadder.FriendInfo friendInfo1;
    private javax.swing.JMenu help;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenuItem newFriend;
    private javax.swing.JMenuItem removeFriend;
    private javax.swing.JMenuItem save;
    private javax.swing.JMenuItem viewFriend;
    // End of variables declaration//GEN-END:variables
}
